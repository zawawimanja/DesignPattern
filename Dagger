
build for test app or unit test. can use fake (mock) data than real data.

@Module. These classes are responsible for providing objects/classes which can be injected. 
- nak inject class mana

Such classes can define methods annotated with @Provides. 
The returned objects from these methods are available for dependency injection.

@Inject: request dependencies. Can be used on a constructor, a field, or a method.
With the @Inject annotation on the constructor, we instruct Dagger that an object of this class can be injected into other objects. 
Dagger automatically calls this constructor, if an instance of this class is requested.

@Component: enable selected modules and used for performing dependency injection
Component orang tengah antara module & activity
 component is responsible for injecting the Application class.
 
 Application -  use our MyApplicationComponent (now prefixed with Dagger) to inject our Application class. 
 This way a DispatchingAndroidInjector is injected which is then returned when an injector for an activity is 
 requested (through activityInjector()).



We can use the ViewModelModule to define our ViewModels.
We provide a key for each ViewModel using the ViewModelKey class.
Then in our Activity/Fragment, we use the ViewModelFactory class to inject the corresponding ViewModel.

DaggerAppComponent jangan lupa inject dekat viewmodel

Step Entity
Step DAO
Step Api response
Step Api service
Step Repository
So this class will choose which data sources to use to get the data.

Step ViewModel .
The ViewModel will initialise an instance of the Repository class and update the UI based with this data.
ViewModel must have access to the usingMovieDaoclass and the MovieApiService class. This is where Dagger comes in. We will be injecting the ViewModel with the MovieDao class and the MovieApiService class.

***********************************************************************************************************************

Step 1. Create class module
....................................................
Step 2. ViewModelFactory   - inject modules to viewmodelfactory
ViewModelFactory class basically helps you dynamically create ViewModels for your Activities and Fragments.

Step 3. ViewModelKey - interface class
ViewModelKeys helps you map your ViewModel classes so ViewModelFactory can correctly provide/inject them.

Step 4.  ViewModelModule
The ViewModelModule is used to provide a map of viewmodels through dagger that is used by the ViewModelFactory class.
...............................................
Step 5. ActivityModule
....................
Step 6. AppComponent
The connection between the modules and the classes which need the dependency.
.............
Steps 7. Configure Application Class & Manifest Application
 android:name=".AppController"
.......
Steps 8. Inject to MainActivity



##########################################################
1. Class modules kelas mana nak inject. return object untuk DI.
2. Inject modules class tu dalam viewmodel.







