



Using clean architecture because viewmodel maybe full bloatware.


MVVM treats both Activity classes and XML files as views, and ViewModel classes                   - vs MVC
are where you write your business logic. It completely separates an app's UI from its logic.

In MVVM, only the view knows about the view-model. The view-model has no idea about the view.  - vs MVP

Presentation Layer  -                                                              Activity --> ViewModel
Domain Layer           - The domain layer contains all the use cases of your application              <--|
Data Layer - This has all the repositories which the domain layer can use. This layer exposes a data source API to outside classes:


 business logic, UI, and data models should live at different places.
 
##2 method

1. Data binding /LiveData
a- ObservableField
b- MutableField
2. RxJava

#Dependency Injection
inject other object

1.Dagger
